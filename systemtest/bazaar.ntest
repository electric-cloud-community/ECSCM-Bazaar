# -*-Perl-*-

# bazaar.ntest -
#
# Exercise basic components of ECSCM-Bazaar plugin
#
# Copyright (c) 2005-2011 Electric Cloud, Inc.
# All rights reserved

use strict;

# read in setup and tests that are common to all ECSCM plugin 
# system tests
my $commonFile =  "$::gTestFileDir/../../ECSCM/systemtest/ntest.common";
open F, "< $commonFile";
my $code = do { local $/; <F> };
close F;
eval  $code ;

ntest "check-checkout-present", {}, sub {
    # Check that the plugin contains required components
    my $xpath = $::N->getSteps("$::gPlugin_name","CheckoutCode");
    assertOK($xpath,"get steps");    
    assertEq("checkoutMethod", $xpath->findvalue("//step[1]/stepName"), "step 1 is checkoutMethod");
};

ntest "check-getSCMTag-present", {}, sub {
    my $xpath = $::N->getSteps("$::gPlugin_name","getSCMTag");
    assertOK($xpath, "get steps");
    assertEq("tagMethod", $xpath->findvalue("//step[1]/stepName"), "step 1 is getSCMTag");

};

ntest "check-Preflight-present", {}, sub {
    my $xpath = $::N->getSteps("$::gPlugin_name","Preflight");
    assertOK($xpath, "get steps");
    assertEq("preflight", $xpath->findvalue("//step[1]/stepName"), "step 1 is preflight");

};

ntest "check-config code-present", {}, sub {
    my $xpath = $::N->getProperty("/projects/$::gPlugin_name/scm_driver/$::gPlugin_driver" . "::Cfg");
    assertOK($xpath,"get cfg property");
    assertNe("", $xpath->findvalue("//value"), "Config Code");
};

ntest "check-driver code-present", {}, sub {
    my $xpath = $::N->getProperty("/projects/$::gPlugin_name/scm_driver/$::gPlugin_driver" . "::Driver");
    assertOK($xpath,"get driver property");
};

# Tests specific or customized to this SCM
ntest "setup-import test project", {}, sub {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/import.xml",
               path  => "/projects/Bazaar Project",
               force => 1
             } ), "import test project");
    assertOK($::N->getProcedure("Bazaar Project", "bzr checkout"),"checkout procedure exists");
};

ntest "setup-create configuration", {}, sub {
    my $xpath = $::N->runProcedure("$::gPlugin_name", 
        { procedureName => "CreateConfiguration",
          pollInterval  => '0.2',
          timeout       => 600,
          actualParameter => [ 
            { actualParameterName => 'config', value => "test" }, 
            { actualParameterName => 'description', value => "Bazaar config" },         
            { actualParameterName => 'credential', value => "test" },
          ],
          credential => [ 
            { 
              credentialName => 'test',
              userName => "qa",
              password => "qa", 
             },            
          ],          
        });

    assertOK($xpath, "run create configuration procedure");
    # make sure it finished
    my $jobId = 0;
    my $status = "";
    assertDef($xpath, "runProcedure finished without a timeout");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # examine log files
    $xpath = $::N->getJobDetails($jobId);

    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");

    # check that the config and credential exist
    $xpath = $::N->getProperty("/projects/$::ECSCM/scm_cfgs/test/scmPlugin");
    assertEq("ECSCM-Bazaar",$xpath->findvalue("//value")->string_value,"config type");
};

#############################################################
# Fake output commands
#############################################################


#############################################################
# test-checkout-code: test the checkout command and output
#    for the mercurial checkout subprocedure. 
#   
#############################################################
ntest "test checkout code", {}, sub {
    # fake command output
    $::gFakeCmdOutput  = `cat $::gTestFileDir/checkout.log`;
    doSetup();
    
    my $xpath = $::N->getActualParameters({projectName => "Bazaar Project", procedureName => "bzr checkout", stepName => "checkout"});
    my $branch_location = $xpath->findvalue("//actualParameter[actualParameterName='branch_location']/value");
    my $config = $xpath->findvalue("//actualParameter[actualParameterName='config']/value");
    my $dest = $xpath->findvalue("//actualParameter[actualParameterName='dest']/value");
   

    my ($cmd, $out, $err) = runFakeCmd("checkout", $branch_location, $dest);
    
    #bzr only shows output when there is an error or a warning, verbose mode is available but
    #is not working on the versions tested 
    my $expectedOutput = '';
        
    #my @expected = split(/\n/, $expectedOutput);
    
    assertEq("bzr checkout bzr://linplugin1:4155 $dest",
        $cmd, 'command misspelled');
    assertDiff("$expectedOutput", $out, 'unkown error');
    assertEq(0, $err,'exit code was different than 0');
};


#############################################################
# test preflight server: test the preflight actions from
#   the server
#############################################################
ntest "test preflight client", {}, sub {
    # fake command output
    $::gFakeCmdOutput  = `cat $::gTestFileDir/preflight.log`;
        
    my ($cmd, $out, $err) = runFakeCmd("ecclientpreflight");
    
    my $expectedOutput = 'Storing parameter "config" with value "test".'
        .'  Storing parameter "dest" with value "src".'
        .'  Getting ECSCM bootstrap code from /myProject/procedure_helpers/bootstrap'
        .'  Running boostrap for test ...'
        .'  Loading /plugins/ECSCM-1.2.0.0/project/scm_driver/ECSCM::Base::Cfg..'
        .'  Loading /plugins/ECSCM-1.2.0.0/project/scm_driver/ECSCM::Base::Driver..'
        .'  Using plugin ECSCM-Bazaar version 1.0.0.0'
        .'  Waiting to download files...'
        .'  Bazaar information received from client:'
        .'  BazaarWorkdir: C:\bazaar\workdir'
        .'  BranchLocation: bzr://192.168.100.227:4155'
        .'  Log Command: bzr checkout bzr://192.168.100.227:4155 src --quiet --verbose --lightweight'
        .'  Log Result:'
        .'  checked out'
        .'  Overlaying file list received from client:'
        .'  Moving: "ecpreflight_files/New Text Document.txt" to "src/."'
        .'  Overwriting: "src/test2.txt"'
        .'  apf_driver returned 1';

    my @expected = split(/\n/, $expectedOutput);
    assertDiff('ecclientpreflight.exe --config .preflight', 
        $cmd, 'command misspelled');
    assertDiff("@expected", $out, 'no output');
    assertEq(0, $err,'exit code was different than 0');

};

#############################################################
# test getSCM tag: test the method for the sentry process
#############################################################
ntest "test getSCMTag", {}, sub {
    # fake command output
    $::gFakeCmdOutput  = `cat $::gTestFileDir/getSCMTag.log`;
        
    my ($cmd, $out, $err) = runFakeCmd("getSCMTag", 'bzr://192.168.100.227');
    my $expectedOutput = 'Loading /myProject/scm_driver/ECSCM::Base::Cfg..' 
        .'   Loading /myProject/scm_driver/ECSCM::Base::Driver..'
        .'   Loading /myProject/scm_driver/ElectricSentry::TriggerCfg..'
        .'   Loading /myProject/scm_driver/ElectricSentry::ScheduleCfg..'
        .'   Loading /myProject/scm_driver/ElectricSentry::JobCfg..'
        .'   Loading /myProject/scm_driver/ElectricSentry::GlobalCfg..'
        .'   Loading /myProject/scm_driver/ElectricSentry::Driver..'
        .'   Checking schedule - Bazaar Project:test'
        .'   Using plugin ECSCM-Bazaar version 1.0.0.0'
        .'   Log Command: bzr log bzr://192.168.100.227 -r-1'
        .'    Log Result: ------------------------------------------------------------'
        .'              : revno: 1'
        .'              : committer: Giancarlo <giancarlo@giancarlo-VM>'
        .'              : branch nick: repo'
        .'              : timestamp: Fri 2011-06-17 11:13:19 -0600'
        .'              : message:'
        .'              :   Initial import'
        .'    (nothing new)';
           
    my @expected = split(/\n/, $expectedOutput);
    #my @valueFromTest = split(/\n/, $out);
    
    assertDiff('bzr log bzr://192.168.100.227 -r-1', $cmd, 'command misspelled');
    #assertDiff("@expected", "@valueFromTest", 'no output');
    assertEq(0, $err,'exit code was different than 0');

};

#############################################################
# helper routines
#############################################################

#############################################################
# importProject: imports a project from the xml file
#############################################################
sub importProject() {
    assertOK($::N->import(
             { file =>"$::gTestFileDir/import.xml",
               path  => "/projects/Bazaar Project",
               force => 1
             } ), "import test project");
    assertOK($::N->getProcedure("Bazaar Project", "bzr preflight"), "bzr preflight procedure doesn't exist");
    $::gProjectImported = 1;
}

#############################################################
# doSetup: imports a project if it was not done before
#############################################################
sub doSetup() {
    if(! $::gProjectImported) {
        importProject();
    }
}

#############################################################
# runFakeCmd: run a fake command. Use for testing
#                                                           
# cmdin - the command to run
# input - the text to pipe into cmd (optional)
#
# returns
#   exitstatus - exit code of command
#   text       - stdout of command
#############################################################
sub runFakeCmd
{
    my ($fakeCmd, @opts) = @_;
    my $cmd = "";

    ## for test, if canned output is given, pop off
    ## the next output block and return
    if ("$::gFakeCmdOutput" eq "") {
        # we ran out of fake output
        return (99,'no more output');
    }
    
    if("checkout" eq $fakeCmd) {
        $cmd = 'bzr checkout ' . $opts[0];
        $cmd .= ' ' . $opts[1]  if ($opts[1]);
    }
    elsif ("ecclientpreflight" eq $fakeCmd || "apf_driver" eq $fakeCmd ) {
        $cmd = 'ecclientpreflight.exe --config .preflight'
    }
    elsif("getSCMTag") {
        $cmd = 'bzr log ' . $opts[0] . ' -r-1';
    }
    
    my @lines = split(/\|\|/, "$::gFakeCmdOutput");
    my $text = shift (@lines);
    my ($exitstatus,$out) = split(/\:\:\:/,$text);
    chomp $exitstatus;

    # push remaining text 
    my $newv = join ("\|\|", @lines);
    $::gFakeCmdOutput = $newv;

    return ($cmd,$out,$exitstatus);
}


1

